#include "src/healpix_sampling.h"
#include "src/time.h"

#ifdef CUDA
#include "src/gpu_utils/cuda_settings.h"
#include <cuda_runtime.h>
#include "src/gpu_utils/cuda_mem_utils.h"
#endif

RFLOAT L_table[9] = {
    1,0,0,0,1,0,0,0,1
};
RFLOAT R_table[24][9]= {
    {1,0,0,0,1,0,0,0,1},
    {0,1,0,0,0,1,1,0,0},
    {0,0,1,1,0,0,0,1,0},
    {0,1,0,-1,0,0,0,0,1},
    {-1,0,0,0,-1,0,0,0,1},
    {0,-1,0,1,0,0,0,0,1},
    {-1,0,0,0,0,1,0,1,0},
    {0,0,1,0,1,0,-1,0,0},
    {1,0,0,0,0,-1,0,1,0},
    {0,0,1,0,-1,0,1,0,0},
    {0,-1,0,0,0,1,-1,0,0},
    {0,0,1,-1,0,0,0,-1,0},
    {0,0,-1,-1,0,0,0,1,0},
    {0,-1,0,0,0,-1,1,0,0},
    {1,0,0,0,0,1,0,-1,0},
    {0,0,-1,0,1,0,1,0,0},
    {0,1,0,0,0,-1,-1,0,0},
    {0,0,-1,0,-1,0,-1,0,0},
    {-1,0,0,0,1,0,0,0,-1},
    {0,1,0,1,0,0,0,0,-1},
    {1,0,0,0,-1,0,0,0,-1},
    {-1,0,0,0,0,-1,0,-1,0},
    {0,0,-1,1,0,0,0,-1,0},
    {0,-1,0,-1,0,0,0,0,-1}
};

RFLOAT rot_angles[507] = {
    47.8125,	46.4063,	88.5,	85.5,	88.4483,	76.5,	73.5,	76.0345,	82.5,	79.5,	82.2414,	85.3448,	88.3929,	85.1786,	88.3333,	79.1379,	81.9643,	78.75,	81.6667,	85,	88.2692,	84.8077,	88.2,	56.25,	63.2813,	65.3226,	60.4688,	57.6562,	59.5161,	62.4194,	64.5,	61.5,	63.6207,	52.0312,	49.2188,	50.625,	53.4375,	54.8437,	52.0312,	53.7097,	47.8125,	49.2188,	46.4063,	47.9032,	50.8065,	52.5,	49.5,	51.2069,	56.6129,	58.5,	55.5,	57.4138,	60.5172,	62.6786,	59.4643,	61.6667,	54.3103,	56.25,	53.0357,	55,	58.3333,	60.5769,	57.1154,	59.4,	68.2258,	70.5,	67.5,	69.8276,	72.931,	75.5357,	72.3214,	75,	66.7241,	69.1071,	65.8929,	68.3333,	71.6667,	74.4231,	70.9615,	73.8,	78.3333,	81.3462,	77.8846,	81,	84.6,	88.125,	84.375,	88.0435,	77.4,	80.625,	76.875,	80.2174,	84.1304,	87.9545,	83.8636,	87.8571,	65,	67.5,	64.0385,	66.6,	70.2,	73.125,	69.375,	72.3913,	63,	65.625,	61.875,	64.5652,	68.4783,	71.5909,	67.5,	70.7143,	76.3043,	79.7727,	75.6818,	79.2857,	83.5714,	87.75,	83.25,	87.6316,	75,	78.75,	74.25,	78.1579,	82.8947,	87.5,	82.5,	87.3529,	45,	46.5,	48.1034,	49.8214,	46.6071,	48.3333,	46.7308,	45,	51.6667,	53.6538,	50.1923,	52.2,	55.8,	58.125,	54.375,	56.7391,	48.6,	50.625,	46.875,	48.913,	52.8261,	55.2273,	51.1364,	53.5714,	47.0455,	49.2857,	51.75,	47.25,	49.7368,	47.5,	60.6522,	63.4091,	59.3182,	62.1429,	66.4286,	69.75,	65.25,	68.6842,	57.8571,	60.75,	56.25,	59.2105,	63.9474,	67.5,	62.5,	66.1765,	73.4211,	77.5,	72.5,	76.7647,	82.0588,	87.1875,	81.5625,	87,	71.4706,	75.9375,	70.3125,	75,	81,	86.7857,	80.3571,	86.5385,	54.4737,	57.5,	52.5,	55.5882,	60.8824,	64.6875,	59.0625,	63,	50.2941,	53.4375,	47.8125,	51,	57,	61.0714,	54.6429,	58.8462,	69,	73.9286,	67.5,	72.6923,	79.6154,	86.25,	78.75,	85.9091,	65.7692,	71.25,	63.75,	69.5455,	77.7273,	85.5,	76.5,	85,	48.2143,	51.9231,	56.25,	48.75,	53.1818,	49.5,	61.3636,	67.5,	58.5,	65,	75,	84.375,	73.125,	83.5714,	55,	61.875,	50.625,	57.8571,	70.7143,	82.5,	67.5,	81,	45,	52.5,	63,	78.75,	56.25,	75,	67.5,	132.188,	135,	133.594,	135,	130.781,	129.375,	132.188,	133.594,	130.781,	132.097,	126.563,	127.969,	125.156,	126.29,	129.194,	130.5,	127.5,	128.793,	122.344,	119.531,	120.484,	114.677,	117.581,	118.5,	115.5,	116.379,	123.387,	124.5,	121.5,	122.586,	125.69,	126.964,	123.75,	125,	119.483,	120.536,	117.321,	118.333,	121.667,	122.885,	119.423,	120.6,	106.5,	103.5,	103.966,	91.5517,	97.7586,	100.862,	101.25,	98.0357,	98.3333,	94.6552,	94.8214,	91.6071,	91.6667,	95,	95.1923,	91.7308,	91.8,	111.774,	112.5,	109.5,	110.172,	113.276,	114.107,	110.893,	111.667,	107.069,	107.679,	104.464,	105,	108.333,	109.038,	105.577,	106.2,	115,	115.962,	112.5,	113.4,	117,	118.125,	114.375,	115.435,	109.8,	110.625,	106.875,	107.609,	111.522,	112.5,	108.409,	109.286,	101.667,	102.115,	98.6538,	99,	102.6,	103.125,	99.375,	99.7826,	95.4,	95.625,	91.875,	91.9565,	95.8696,	96.1364,	92.0455,	92.1429,	103.696,	104.318,	100.227,	100.714,	105,	105.75,	101.25,	101.842,	96.4286,	96.75,	92.25,	92.3684,	97.1053,	97.5,	92.5,	92.6471,	133.5,	135,	131.897,	133.393,	130.179,	131.667,	135,	133.269,	128.333,	129.808,	126.346,	127.8,	131.4,	133.125,	129.375,	131.087,	124.2,	125.625,	121.875,	123.261,	127.174,	128.864,	124.773,	126.429,	135,	132.955,	135,	130.714,	132.75,	128.25,	130.263,	135,	132.5,	135,	119.348,	120.682,	116.591,	117.857,	122.143,	123.75,	119.25,	120.789,	113.571,	114.75,	110.25,	111.316,	116.053,	117.5,	112.5,	113.824,	125.526,	127.5,	122.5,	124.412,	129.706,	132.188,	126.563,	129,	119.118,	120.938,	115.312,	117,	123,	125.357,	118.929,	121.154,	106.579,	107.5,	102.5,	103.235,	108.529,	109.687,	104.062,	105,	97.9412,	98.4375,	92.8125,	93,	99,	99.6429,	93.2143,	93.4615,	111,	112.5,	106.071,	107.308,	114.231,	116.25,	108.75,	110.455,	100.385,	101.25,	93.75,	94.0909,	102.273,	103.5,	94.5,	95,	135,	131.786,	135,	128.077,	131.25,	123.75,	126.818,	135,	130.5,	135,	118.636,	121.5,	112.5,	115,	125,	129.375,	118.125,	122.143,	105,	106.875,	95.625,	96.4286,	109.286,	112.5,	97.5,	99,	127.5,	135,	117,	123.75,	101.25,	105,	135,	112.5,	135
};

RFLOAT tile_angles[507]= {
    52.8311,	51.3178,	45.0061,	45.0061,	43.4282,	45.0061,	45.0061,	43.4282,	45.0061,	45.0061,	43.4282,	43.4282,	41.8588,	41.8588,	40.2976,	43.4282,	41.8588,	41.8588,	40.2976,	40.2976,	38.7442,	38.7442,	37.1981,	49.7718,	48.1897,	46.5931,	48.1897,	48.1897,	46.5931,	46.5931,	45.0061,	45.0061,	43.4282,	51.3178,	51.3178,	49.7718,	49.7718,	48.1897,	48.1897,	46.5931,	49.7718,	48.1897,	48.1897,	46.5931,	46.5931,	45.0061,	45.0061,	43.4282,	46.5931,	45.0061,	45.0061,	43.4282,	43.4282,	41.8588,	41.8588,	40.2976,	43.4282,	41.8588,	41.8588,	40.2976,	40.2976,	38.7442,	38.7442,	37.1981,	46.5931,	45.0061,	45.0061,	43.4282,	43.4282,	41.8588,	41.8588,	40.2976,	43.4282,	41.8588,	41.8588,	40.2976,	40.2976,	38.7442,	38.7442,	37.1981,	40.2976,	38.7442,	38.7442,	37.1981,	37.1981,	35.6591,	35.6591,	34.1266,	37.1981,	35.6591,	35.6591,	34.1266,	34.1266,	32.6005,	32.6005,	31.0802,	40.2976,	38.7442,	38.7442,	37.1981,	37.1981,	35.6591,	35.6591,	34.1266,	37.1981,	35.6591,	35.6591,	34.1266,	34.1266,	32.6005,	32.6005,	31.0802,	34.1266,	32.6005,	32.6005,	31.0802,	31.0802,	29.5656,	29.5656,	28.0562,	31.0802,	29.5656,	29.5656,	28.0562,	28.0562,	26.5517,	26.5517,	25.0519,	46.5931,	45.0061,	43.4282,	41.8588,	41.8588,	40.2976,	38.7442,	37.1981,	40.2976,	38.7442,	38.7442,	37.1981,	37.1981,	35.6591,	35.6591,	34.1266,	37.1981,	35.6591,	35.6591,	34.1266,	34.1266,	32.6005,	32.6005,	31.0802,	32.6005,	31.0802,	29.5656,	29.5656,	28.0562,	26.5517,	34.1266,	32.6005,	32.6005,	31.0802,	31.0802,	29.5656,	29.5656,	28.0562,	31.0802,	29.5656,	29.5656,	28.0562,	28.0562,	26.5517,	26.5517,	25.0519,	28.0562,	26.5517,	26.5517,	25.0519,	25.0519,	23.5565,	23.5565,	22.0651,	25.0519,	23.5565,	23.5565,	22.0651,	22.0651,	20.5775,	20.5775,	19.0933,	28.0562,	26.5517,	26.5517,	25.0519,	25.0519,	23.5565,	23.5565,	22.0651,	25.0519,	23.5565,	23.5565,	22.0651,	22.0651,	20.5775,	20.5775,	19.0933,	22.0651,	20.5775,	20.5775,	19.0933,	19.0933,	17.6124,	17.6124,	16.1345,	19.0933,	17.6124,	17.6124,	16.1345,	16.1345,	14.6593,	14.6593,	13.1865,	20.5775,	19.0933,	17.6124,	17.6124,	16.1345,	14.6593,	16.1345,	14.6593,	14.6593,	13.1865,	13.1865,	11.7159,	11.7159,	10.2472,	13.1865,	11.7159,	11.7159,	10.2472,	10.2472,	8.78018,	8.78018,	7.31462,	10.2472,	8.78018,	7.31462,	5.85027,	5.85027,	4.38687,	2.92418,	52.8311,	52.8311,	51.3178,	49.7718,	51.3178,	49.7718,	49.7718,	48.1897,	48.1897,	46.5931,	49.7718,	48.1897,	48.1897,	46.5931,	46.5931,	45.0061,	45.0061,	43.4282,	48.1897,	48.1897,	46.5931,	46.5931,	46.5931,	45.0061,	45.0061,	43.4282,	46.5931,	45.0061,	45.0061,	43.4282,	43.4282,	41.8588,	41.8588,	40.2976,	43.4282,	41.8588,	41.8588,	40.2976,	40.2976,	38.7442,	38.7442,	37.1981,	45.0061,	45.0061,	43.4282,	43.4282,	43.4282,	43.4282,	41.8588,	41.8588,	40.2976,	43.4282,	41.8588,	41.8588,	40.2976,	40.2976,	38.7442,	38.7442,	37.1981,	46.5931,	45.0061,	45.0061,	43.4282,	43.4282,	41.8588,	41.8588,	40.2976,	43.4282,	41.8588,	41.8588,	40.2976,	40.2976,	38.7442,	38.7442,	37.1981,	40.2976,	38.7442,	38.7442,	37.1981,	37.1981,	35.6591,	35.6591,	34.1266,	37.1981,	35.6591,	35.6591,	34.1266,	34.1266,	32.6005,	32.6005,	31.0802,	40.2976,	38.7442,	38.7442,	37.1981,	37.1981,	35.6591,	35.6591,	34.1266,	37.1981,	35.6591,	35.6591,	34.1266,	34.1266,	32.6005,	32.6005,	31.0802,	34.1266,	32.6005,	32.6005,	31.0802,	31.0802,	29.5656,	29.5656,	28.0562,	31.0802,	29.5656,	29.5656,	28.0562,	28.0562,	26.5517,	26.5517,	25.0519,	45.0061,	43.4282,	43.4282,	41.8588,	41.8588,	40.2976,	40.2976,	38.7442,	40.2976,	38.7442,	38.7442,	37.1981,	37.1981,	35.6591,	35.6591,	34.1266,	37.1981,	35.6591,	35.6591,	34.1266,	34.1266,	32.6005,	32.6005,	31.0802,	34.1266,	32.6005,	31.0802,	31.0802,	29.5656,	29.5656,	28.0562,	28.0562,	26.5517,	25.0519,	34.1266,	32.6005,	32.6005,	31.0802,	31.0802,	29.5656,	29.5656,	28.0562,	31.0802,	29.5656,	29.5656,	28.0562,	28.0562,	26.5517,	26.5517,	25.0519,	28.0562,	26.5517,	26.5517,	25.0519,	25.0519,	23.5565,	23.5565,	22.0651,	25.0519,	23.5565,	23.5565,	22.0651,	22.0651,	20.5775,	20.5775,	19.0933,	28.0562,	26.5517,	26.5517,	25.0519,	25.0519,	23.5565,	23.5565,	22.0651,	25.0519,	23.5565,	23.5565,	22.0651,	22.0651,	20.5775,	20.5775,	19.0933,	22.0651,	20.5775,	20.5775,	19.0933,	19.0933,	17.6124,	17.6124,	16.1345,	19.0933,	17.6124,	17.6124,	16.1345,	16.1345,	14.6593,	14.6593,	13.1865,	22.0651,	20.5775,	19.0933,	19.0933,	17.6124,	17.6124,	16.1345,	16.1345,	14.6593,	13.1865,	16.1345,	14.6593,	14.6593,	13.1865,	13.1865,	11.7159,	11.7159,	10.2472,	13.1865,	11.7159,	11.7159,	10.2472,	10.2472,	8.78018,	8.78018,	7.31462,	8.78018,	7.31462,	7.31462,	5.85027,	5.85027,	4.38687,	4.38687,	2.92418,	1.46197
};

RFLOAT psi_angles[192] = {
    0,	1.875,	3.75,	5.625,	7.5,	9.375,	11.25,	13.125,	15,	16.875,	18.75,	20.625,	22.5,	24.375,	26.25,	28.125,	30,	31.875,	33.75,	35.625,	37.5,	39.375,	41.25,	43.125,	45,	46.875,	48.75,	50.625,	52.5,	54.375,	56.25,	58.125,	60,	61.875,	63.75,	65.625,	67.5,	69.375,	71.25,	73.125,	75,	76.875,	78.75,	80.625,	82.5,	84.375,	86.25,	88.125,	90,	91.875,	93.75,	95.625,	97.5,	99.375,	101.25,	103.125,	105,	106.875, 108.75,	110.625,	112.5,	114.375,	116.25,	118.125,	120,	121.875,	123.75,	125.625,	127.5,	129.375,	131.25,	133.125, 135,	136.875,	138.75,	140.625,	142.5,	144.375,	146.25,	148.125,	150,	151.875,	153.75,	155.625,	157.5,	159.375, 161.25,	163.125,	165,	166.875,	168.75,	170.625,	172.5,	174.375,	176.25,	178.125,	180,	181.875,	183.75,	185.625, 187.5,	189.375,	191.25,	193.125,	195,	196.875,	198.75,	200.625,	202.5,	204.375,	206.25,	208.125,	210,	211.875, 213.75,	215.625,	217.5,	219.375,	221.25,	223.125,	225,	226.875,	228.75,	230.625,	232.5,	234.375,	236.25,	238.125, 240,	241.875,	243.75,	245.625,	247.5,	249.375,	251.25,	253.125,	255,	256.875,	258.75,	260.625,	262.5,	264.375, 266.25,	268.125,	270,	271.875,	273.75,	275.625,	277.5,	279.375,	281.25,	283.125,	285,	286.875,	288.75,	290.625, 292.5,	294.375,	296.25,	298.125,	300,	301.875,	303.75,	305.625,	307.5,	309.375,	311.25,	313.125,	315,	316.875, 318.75,	320.625,	322.5,	324.375,	326.25,	328.125,	330,	331.875,	333.75,	335.625,	337.5,	339.375,	341.25,	343.125, 345,	346.875,	348.75,	350.625,	352.5,	354.375,	356.25,	358.125
};

int main() {
#ifdef TIMING
        Timer timer;
        int total = timer.setNew("total time");
        timer.tic(total);
#endif
    HealpixSampling test;
    test.is_3D = true;
    /*
    RFLOAT prior_rot = 47.3658;
    RFLOAT prior_tilt= 22.388;
    RFLOAT prior_psi = 23.9108;
    RFLOAT sigma_rot = 1.875;
    RFLOAT sigma_tilt= 1.875;
    RFLOAT sigma_psi = 1.875;
*/
    RFLOAT prior_rot = 60.5541;
    RFLOAT prior_tilt= 34.0591;
    RFLOAT prior_psi = 17.5985;
    RFLOAT sigma_rot = 1.875;
    RFLOAT sigma_tilt= 1.875;
    RFLOAT sigma_psi = 1.875;

    //prior_rot=52.6724, prior_tilt=50.7146 , prior_psi=-128.763;
    //prior_rot=113.163, prior_tilt=31.4126 , prior_psi=46.3297;
    //prior_rot=111.786, prior_tilt=39.06 , prior_psi=14.7017;
    //prior_rot=99.319, prior_tilt=10.362 , prior_psi=-3.70333;
    //prior_rot=126.178, prior_tilt=13.6742 , prior_psi=61.7537;
    prior_rot=78.6533, prior_tilt=29.4951 , prior_psi=-102.903;


    std::vector<int> pointer_dir_nonzeroprior_gpu;
    std::vector<int> pointer_psi_nonzeroprior_gpu;
    std::vector<int> pointer_dir_nonzeroprior;
    std::vector<int> pointer_psi_nonzeroprior;

    std::vector<RFLOAT> directions_prior_gpu;
    std::vector<RFLOAT> psi_prior_gpu;
    std::vector<RFLOAT> directions_prior;
    std::vector<RFLOAT> psi_prior;

    Matrix2D<RFLOAT> w;
    w.resize(3,3);
    for(int i=0; i<24; ++i) {
        memcpy(w.mdata,L_table,sizeof(RFLOAT)*9);
        test.L_repository.push_back(w);
    }
    for(int i=0; i<24; ++i) {
        memcpy(w.mdata,R_table[i],sizeof(RFLOAT)*9);
        test.R_repository.push_back(w);
    }
    test.rot_angles.resize(507);
    test.tilt_angles.resize(507);
    test.psi_angles.resize(192);
    memcpy(&test.rot_angles[0],rot_angles,sizeof(RFLOAT)*507);
    memcpy(&test.tilt_angles[0],tile_angles,sizeof(RFLOAT)*507);
    memcpy(&test.psi_angles[0],psi_angles,sizeof(RFLOAT)*192);

    cudaSetDevice(0);
    double* dummy;
    cudaMalloc((void**)&dummy,sizeof(double));
    cudaFree(dummy);
    size_t avail, total_mem;
    cudaMemGetInfo( &avail, &total_mem ) ;
    int memAlignmentSize;
    cudaDeviceGetAttribute ( &memAlignmentSize, cudaDevAttrTextureAlignment, 0 );
    printf("GPU memory: avail %ld, total %ld, alignmentSize %ld\n",avail,total_mem,memAlignmentSize);
    CudaCustomAllocator allocator(0,memAlignmentSize);
    printf("Allocator resizing...\n");
    allocator.resize(avail-500*1000*1000);
    printf("Allocator size : Free %ld, Used %ld\n",allocator.getTotalFreeSpace(),allocator.getTotalUsedSpace());

#ifdef TIMING
        int stamp = timer.setNew("select GPU time");
        timer.tic(stamp);
#endif
    test.selectOrientationsWithNonZeroPriorProbability_gpu(
        prior_rot, prior_tilt, prior_psi,
        sigma_rot, sigma_tilt, sigma_psi,
        pointer_dir_nonzeroprior_gpu, directions_prior_gpu,
        pointer_psi_nonzeroprior_gpu, psi_prior_gpu,&allocator,true);
#ifdef TIMING
        timer.toc(stamp);
#endif

    printf("Begin Reference run\n");
#ifdef TIMING
        int stamp2 = timer.setNew("select CPU time");
        timer.tic(stamp2);
#endif
    test.selectOrientationsWithNonZeroPriorProbability(
        prior_rot, prior_tilt, prior_psi,
        sigma_rot, sigma_tilt, sigma_psi,
        pointer_dir_nonzeroprior, directions_prior,
        pointer_psi_nonzeroprior, psi_prior,true);
#ifdef TIMING
        timer.toc(stamp2);
        timer.toc(total);
        timer.printTimes(1);
#endif

    std::cout << "GPU size : " << directions_prior_gpu.size() << std::endl;
    std::cout << "-- directions_prior_gpu: " << std::endl;
    for(int i=0;i<directions_prior_gpu.size();++i) {
        std::cout << "\t" << directions_prior_gpu[i];
    }
    std::cout << std::endl;
    std::cout << "-- pointer_dir_nonzeroprior_gpu : " << std::endl;
    for(int i=0;i<pointer_dir_nonzeroprior_gpu.size();++i) {
        std::cout << "\t" << pointer_dir_nonzeroprior_gpu[i];
    }
    std::cout << std::endl;


    std::cout << "Reference size : " << directions_prior.size() << std::endl;
    std::cout << "-- directions_prior: " << std::endl;
    for(int i=0;i<directions_prior.size();++i) {
        std::cout << "\t" << directions_prior[i];
    }
    std::cout << std::endl;
    std::cout << "-- pointer_dir_nonzeroprior : " << std::endl;
    for(int i=0;i<pointer_dir_nonzeroprior.size();++i) {
        std::cout << "\t" << pointer_dir_nonzeroprior[i];
    }
    std::cout << std::endl;

                std::cout << "-- Checking pointer_dir_nonzeroprior size : Referece is " << pointer_dir_nonzeroprior.size() << std::endl;
				if(pointer_dir_nonzeroprior.size()!=pointer_dir_nonzeroprior_gpu.size()) {
					std::cout << "-- Error : Size incorrect : Ref " << pointer_dir_nonzeroprior.size() << ", GPU " << pointer_dir_nonzeroprior_gpu.size() << std::endl;
					REPORT_ERROR("Wrong Answer");
				}
				std::cout << "-- Checking pointer_dir_nonzeroprior content " << std::endl;
				for(int i=0;i<pointer_dir_nonzeroprior.size();++i) {
					if(pointer_dir_nonzeroprior[i]!=pointer_dir_nonzeroprior_gpu[i]) {
						std::cout << "-- Error at " << i << " : result incorrect : Ref " << pointer_dir_nonzeroprior[i] << ", GPU " << pointer_dir_nonzeroprior_gpu[i] << std::endl;
						REPORT_ERROR("Wrong Answer");
					}
				}
				std::cout << "-- Checking directions_prior size : Referece is " << directions_prior.size() << std::endl;
				if(directions_prior.size()!=directions_prior_gpu.size()) {
					std::cout << "-- Error : Size incorrect : Ref " << directions_prior.size() << ", GPU " << directions_prior_gpu.size() << std::endl;
					REPORT_ERROR("Wrong Answer");
				}
				std::cout << "-- Checking directions_prior content " << std::endl;
				for(int i=0;i<directions_prior.size();++i) {
					if(fabs(directions_prior[i]-directions_prior_gpu[i])>1e-4) {
						std::cout << "-- Error at " << i << " : result incorrect : Ref " << directions_prior[i] << ", GPU " << directions_prior_gpu[i] << std::endl;
						REPORT_ERROR("Wrong Answer");
					}
				}
				std::cout << "-- Check passed." << std::endl;
    return 0;
}